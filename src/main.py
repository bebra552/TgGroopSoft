import sys
import os
import asyncio
import logging
import csv
from datetime import datetime
from pathlib import Path
from io import StringIO
from PyQt6.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout,
                             QWidget, QPushButton, QLineEdit, QTextEdit, QLabel,
                             QProgressBar, QFileDialog, QGroupBox, QFormLayout,
                             QMessageBox, QTabWidget, QTableWidget, QTableWidgetItem,
                             QDialog, QDialogButtonBox, QInputDialog)
from PyQt6.QtCore import QThread, pyqtSignal, Qt, QTimer
from PyQt6.QtGui import QFont, QIcon
from pyrogram import Client
from pyrogram.errors import FloodWait, UserPrivacyRestricted, ChatAdminRequired
from pyrogram.enums import UserStatus



class TelegramParserThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram –≥—Ä—É–ø–ø"""
    progress_signal = pyqtSignal(str)
    progress_value = pyqtSignal(int)
    finished_signal = pyqtSignal(str, list)
    error_signal = pyqtSignal(str)
    auth_code_needed = pyqtSignal(str)  # –°–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞
    auth_password_needed = pyqtSignal()  # –°–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è

    def __init__(self, api_id, api_hash, chat_link, max_members=1000, session_name=None):
        super().__init__()
        self.api_id = api_id
        self.api_hash = api_hash
        self.chat_link = chat_link
        self.max_members = max_members
        self.client = None
        self.auth_code = None
        self.auth_password = None
        self.session_name = session_name or "telegram_parser_session"
        self.is_running = True

    def format_last_online(self, user):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è"""
        try:
            if not hasattr(user, 'status') or user.status is None:
                return "–°–∫—Ä—ã—Ç–æ"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ enum —Å—Ç–∞—Ç—É—Å–∞
            if user.status == UserStatus.ONLINE:
                return "–û–Ω–ª–∞–π–Ω"
            elif user.status == UserStatus.OFFLINE:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ last_online_date
                if hasattr(user, 'last_online_date') and user.last_online_date:
                    return user.last_online_date.strftime("%Y-%m-%d %H:%M:%S")
                return "–ù–µ –≤ —Å–µ—Ç–∏"
            elif user.status == UserStatus.RECENTLY:
                return "–ù–µ–¥–∞–≤–Ω–æ"
            elif user.status == UserStatus.LAST_WEEK:
                return "–ù–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ"  
            elif user.status == UserStatus.LAST_MONTH:
                return "–í –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ"
            elif user.status == UserStatus.LONG_TIME_AGO:
                return "–î–∞–≤–Ω–æ"
            else:
                return "–°–∫—Ä—ã—Ç–æ"
                
        except Exception as e:
            return "–°–∫—Ä—ã—Ç–æ"

    def get_user_status(self, user):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.format_last_online(user)

    async def safe_get_chat_members(self, client, chat_id, limit=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
        members = []
        try:
            async for member in client.get_chat_members(chat_id, limit=limit):
                if not self.is_running:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
                    break

                members.append(member)
                await asyncio.sleep(0.1)

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if len(members) % 50 == 0:
                    self.progress_signal.emit(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members)}")
                    self.progress_value.emit(min(len(members), limit or 1000))

        except FloodWait as e:
            if self.is_running:
                self.progress_signal.emit(f"‚è≥ FloodWait: –æ–∂–∏–¥–∞–Ω–∏–µ {e.value} —Å–µ–∫")
                await asyncio.sleep(e.value)
                return await self.safe_get_chat_members(client, chat_id, limit)
            else:
                return None
        except ChatAdminRequired:
            self.error_signal.emit("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return None
        except Exception as e:
            self.error_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {str(e)}")
            return None
        return members

    async def ensure_auth(self):
        """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            me = await self.client.get_me()
            self.progress_signal.emit(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name}")
            return True
        except Exception:
            self.progress_signal.emit("üì± –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            self.auth_code_needed.emit("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +1234567890)")
            while self.auth_code is None and self.is_running:
                await asyncio.sleep(0.1)

            if not self.is_running:
                return False

            phone = self.auth_code.strip()
            self.auth_code = None

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
            self.progress_signal.emit(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ {phone}...")
            try:
                sent_code = await self.client.send_code(phone)
            except Exception as e:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥: {str(e)}")

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            self.auth_code_needed.emit(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS/Telegram –¥–ª—è {phone}")
            while self.auth_code is None and self.is_running:
                await asyncio.sleep(0.1)

            if not self.is_running:
                return False

            code = self.auth_code.strip()
            self.auth_code = None

            try:
                # –ü—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º
                await self.client.sign_in(phone, sent_code.phone_code_hash, code)
                self.progress_signal.emit("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                return True
            except Exception as sign_error:
                error_str = str(sign_error).lower()
                if "password" in error_str or "2fa" in error_str or "two-step" in error_str:
                    # –ù—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å 2FA
                    self.progress_signal.emit("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA...")
                    self.auth_password_needed.emit()
                    while self.auth_password is None and self.is_running:
                        await asyncio.sleep(0.1)

                    if not self.is_running:
                        return False

                    try:
                        await self.client.check_password(self.auth_password)
                        self.progress_signal.emit("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å 2FA —É—Å–ø–µ—à–Ω–∞")
                        return True
                    except Exception as pwd_error:
                        raise Exception(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å 2FA: {str(pwd_error)}")
                else:
                    raise Exception(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(sign_error)}")

    async def parse_group(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        old_stdin = sys.stdin
        try:
            if not self.is_running:
                return

            self.progress_signal.emit("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞...")

            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º stdin —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞
            sys.stdin = StringIO("")

            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
            self.client = Client(
                self.session_name,
                api_id=int(self.api_id),
                api_hash=self.api_hash,
                in_memory=False,
                no_updates=True
            )

            self.progress_signal.emit("üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
            await self.client.connect()

            if not self.is_running:
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º/–≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if not await self.ensure_auth():
                return

            if not self.is_running:
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            self.progress_signal.emit("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ...")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫
            chat_link = self.chat_link.strip()
            if chat_link.startswith("https://t.me/"):
                chat_username = chat_link.replace("https://t.me/", "")
            elif chat_link.startswith("@"):
                chat_username = chat_link[1:]  # –£–±–∏—Ä–∞–µ–º @
            elif chat_link.startswith("t.me/"):
                chat_username = chat_link.replace("t.me/", "")
            else:
                chat_username = chat_link

            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if "/" in chat_username:
                chat_username = chat_username.split("/")[0]
            if "?" in chat_username:
                chat_username = chat_username.split("?")[0]

            self.progress_signal.emit(f"üîç –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã: @{chat_username}")

            try:
                chat = await self.client.get_chat(chat_username)
            except Exception as e:
                if "USERNAME_INVALID" in str(e):
                    # –ü—Ä–æ–±—É–µ–º —Å @ –≤ –Ω–∞—á–∞–ª–µ
                    try:
                        chat = await self.client.get_chat(f"@{chat_username}")
                    except Exception as e2:
                        raise Exception(f"–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É: {chat_link}\n–û—à–∏–±–∫–∞: {str(e)}")
                else:
                    raise e

            if not self.is_running:
                return

            self.progress_signal.emit(f"üìä –ì—Ä—É–ø–ø–∞: {chat.title}")
            self.progress_signal.emit(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {chat.members_count or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")

            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            self.progress_signal.emit("üì• –ù–∞—á–∏–Ω–∞—é –ø–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
            members = await self.safe_get_chat_members(self.client, chat.id, limit=self.max_members)

            if members is None or not self.is_running:
                return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            parsed_data = []
            for i, member in enumerate(members):
                if not self.is_running:
                    break

                try:
                    user = member.user
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
                    user_data = {
                        'ID': user.id,
                        'Username': user.username or '',
                        'First Name': user.first_name or '',
                        'Last Name': user.last_name or '',
                        'Phone': user.phone_number or '' if hasattr(user, 'phone_number') and user.phone_number else '',
                        'Status': self.get_user_status(user),
                        'Last Online': self.format_last_online(user),
                        'Is Bot': '–î–∞' if user.is_bot else '–ù–µ—Ç',
                        'Is Verified': '–î–∞' if user.is_verified else '–ù–µ—Ç',
                        'Is Scam': '–î–∞' if user.is_scam else '–ù–µ—Ç',
                        'Is Premium': '–î–∞' if user.is_premium else '–ù–µ—Ç'
                    }
                    
                    parsed_data.append(user_data)

                    if (i + 1) % 50 == 0:
                        self.progress_signal.emit(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i + 1}/{len(members)}")
                        self.progress_value.emit(i + 1)

                except Exception as e:
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                    try:
                        user = member.user
                        user_data = {
                            'ID': user.id,
                            'Username': user.username or '',
                            'First Name': user.first_name or '',
                            'Last Name': user.last_name or '',
                            'Phone': '',
                            'Status': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                            'Last Online': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                            'Is Bot': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                            'Is Verified': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                            'Is Scam': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                            'Is Premium': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                        }
                        parsed_data.append(user_data)
                    except:
                        continue

            if self.is_running:
                self.finished_signal.emit(chat.title, parsed_data)

        except Exception as e:
            if self.is_running:
                self.error_signal.emit(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º stdin
            sys.stdin = old_stdin
            await self.cleanup()

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.client:
            try:
                if self.client.is_connected:
                    await self.client.disconnect()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        self.is_running = False

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞"""
        try:
            asyncio.run(self.parse_group())
        except Exception as e:
            if self.is_running:
                self.error_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}")


class TelegramParserGUI(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self):
        super().__init__()
        self.parser_thread = None
        self.parsed_data = []
        self.session_name = "telegram_parser_persistent"  # –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
        self.init_ui()
        self.setup_logging()

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("Telegram Group Parser v2.1 - Extended")
        self.setGeometry(100, 100, 1200, 800)  # –£–≤–µ–ª–∏—á–∏–ª–∏ —à–∏—Ä–∏–Ω—É –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ª–æ–Ω–æ–∫

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(central_widget)

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±—ã
        self.tabs = QTabWidget()
        main_layout.addWidget(self.tabs)

        # –¢–∞–± –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.setup_settings_tab()

        # –¢–∞–± –ø–∞—Ä—Å–∏–Ω–≥–∞
        self.setup_parser_tab()

        # –¢–∞–± —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.setup_results_tab()

    def setup_settings_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API"""
        settings_widget = QWidget()
        self.tabs.addTab(settings_widget, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        layout = QVBoxLayout(settings_widget)

        # –ì—Ä—É–ø–ø–∞ API –Ω–∞—Å—Ç—Ä–æ–µ–∫
        api_group = QGroupBox("üîë Telegram API")
        api_layout = QFormLayout(api_group)

        self.api_id_input = QLineEdit()
        self.api_id_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ API ID")
        api_layout.addRow("API ID:", self.api_id_input)

        self.api_hash_input = QLineEdit()
        self.api_hash_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ API Hash")
        api_layout.addRow("API Hash:", self.api_hash_input)

        layout.addWidget(api_group)

        # –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
        parse_group = QGroupBox("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞")
        parse_layout = QFormLayout(parse_group)

        self.max_members_input = QLineEdit("1000")
        parse_layout.addRow("–ú–∞–∫—Å. —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", self.max_members_input)

        self.save_path_input = QLineEdit(str(Path.home() / "Desktop"))
        parse_layout.addRow("–ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", self.save_path_input)

        browse_btn = QPushButton("üìÅ –û–±–∑–æ—Ä")
        browse_btn.clicked.connect(self.browse_save_path)
        parse_layout.addRow("", browse_btn)

        layout.addWidget(parse_group)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±–∏—Ä–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        data_info_group = QGroupBox("üìã –°–æ–±–∏—Ä–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ")
        data_info_layout = QVBoxLayout(data_info_group)
        
        data_info_text = QLabel(
            "‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–±–∏—Ä–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
            "‚Ä¢ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "‚Ä¢ Username (@–Ω–∏–∫–Ω–µ–π–º)\n"
            "‚Ä¢ –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è\n"
            "‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)\n"
            "‚Ä¢ –°—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω\n"
            "‚Ä¢ –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è\n"
            "‚Ä¢ –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç–æ–º\n"
            "‚Ä¢ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç\n"
            "‚Ä¢ –°–∫–∞–º –∞–∫–∫–∞—É–Ω—Ç\n"
            "‚Ä¢ Premium –ø–æ–¥–ø–∏—Å–∫–∞"
        )
        data_info_text.setStyleSheet("color: #333; padding: 10px; font-size: 12px;")
        data_info_layout.addWidget(data_info_text)
        
        layout.addWidget(data_info_group)

        # –ì—Ä—É–ø–ø–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π
        session_group = QGroupBox("üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π")
        session_layout = QVBoxLayout(session_group)

        self.clear_session_btn = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)")
        self.clear_session_btn.clicked.connect(self.clear_session)
        session_layout.addWidget(self.clear_session_btn)

        session_info = QLabel(
            "üí° –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏. –û—á–∏—Å—Ç–∏—Ç–µ –µ—ë, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –ø–æ–¥ –¥—Ä—É–≥–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º."
        )
        session_info.setStyleSheet("color: #666; padding: 5px;")
        session_layout.addWidget(session_info)

        layout.addWidget(session_group)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_label = QLabel(
            "‚ÑπÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API ID –∏ Hash:\n"
            "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://my.telegram.org\n"
            "2. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç\n"
            "3. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ API development tools"
        )
        info_label.setStyleSheet("color: #666; padding: 10px;")
        layout.addWidget(info_label)

        layout.addStretch()

    def setup_parser_tab(self):
        """–¢–∞–± –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        parser_widget = QWidget()
        self.tabs.addTab(parser_widget, "üöÄ –ü–∞—Ä—Å–∏–Ω–≥")

        layout = QVBoxLayout(parser_widget)

        # –ì—Ä—É–ø–ø–∞ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏
        input_group = QGroupBox("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É")
        input_layout = QVBoxLayout(input_group)

        self.chat_link_input = QLineEdit()
        self.chat_link_input.setPlaceholderText("https://t.me/groupname, @groupname –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ groupname")
        input_layout.addWidget(self.chat_link_input)

        # –ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫
        examples_label = QLabel(
            "üìù –ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫:\n"
            "‚Ä¢ https://t.me/python_beginners\n"
            "‚Ä¢ @python_beginners\n"
            "‚Ä¢ python_beginners"
        )
        examples_label.setStyleSheet("color: #666; font-size: 12px; padding: 5px;")
        input_layout.addWidget(examples_label)

        # –ö–Ω–æ–ø–∫–∏
        button_layout = QHBoxLayout()

        self.start_btn = QPushButton("üöÄ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥")
        self.start_btn.clicked.connect(self.start_parsing)
        self.start_btn.setStyleSheet(
            "QPushButton { background-color: #4CAF50; color: white; padding: 10px; font-weight: bold; }")

        self.stop_btn = QPushButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_btn.clicked.connect(self.stop_parsing)
        self.stop_btn.setEnabled(False)
        self.stop_btn.setStyleSheet("QPushButton { background-color: #f44336; color: white; padding: 10px; }")

        button_layout.addWidget(self.start_btn)
        button_layout.addWidget(self.stop_btn)
        input_layout.addLayout(button_layout)

        layout.addWidget(input_group)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        progress_group = QGroupBox("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å")
        progress_layout = QVBoxLayout(progress_group)

        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        progress_layout.addWidget(self.progress_bar)

        self.status_text = QTextEdit()
        self.status_text.setMaximumHeight(200)
        self.status_text.setReadOnly(True)
        progress_layout.addWidget(self.status_text)

        layout.addWidget(progress_group)

        layout.addStretch()

    def setup_results_tab(self):
        """–¢–∞–± —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        results_widget = QWidget()
        self.tabs.addTab(results_widget, "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")

        layout = QVBoxLayout(results_widget)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_layout = QHBoxLayout()

        self.save_csv_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV")
        self.save_csv_btn.clicked.connect(self.save_csv)
        self.save_csv_btn.setEnabled(False)

        self.clear_results_btn = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å")
        self.clear_results_btn.clicked.connect(self.clear_results)

        button_layout.addWidget(self.save_csv_btn)
        button_layout.addWidget(self.clear_results_btn)
        button_layout.addStretch()

        layout.addLayout(button_layout)

        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_table = QTableWidget()
        layout.addWidget(self.results_table)

    def browse_save_path(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        folder = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        if folder:
            self.save_path_input.setText(folder)

    def clear_session(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏"""
        try:
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–∏
            for file in Path.cwd().glob(f"{self.session_name}.*"):
                file.unlink()
            QMessageBox.information(self, "–£—Å–ø–µ—Ö",
                                    "–°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞. –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é: {str(e)}")

    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )

    def start_parsing(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if not all([self.api_id_input.text(), self.api_hash_input.text(), self.chat_link_input.text()]):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!")
            return

        try:
            max_members = int(self.max_members_input.text())
        except ValueError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
            return

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Ç–æ–∫ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if self.parser_thread and self.parser_thread.isRunning():
            self.parser_thread.stop()
            self.parser_thread.wait(3000)  # –ñ–¥–µ–º –¥–æ 3 —Å–µ–∫—É–Ω–¥

        # UI –∏–∑–º–µ–Ω–µ–Ω–∏—è
        self.start_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)
        self.progress_bar.setVisible(True)
        self.progress_bar.setMaximum(max_members)
        self.progress_bar.setValue(0)
        self.status_text.clear()
        self.tabs.setCurrentIndex(1)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Ç–∞–± –ø–∞—Ä—Å–∏–Ω–≥–∞

        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞
        self.parser_thread = TelegramParserThread(
            self.api_id_input.text(),
            self.api_hash_input.text(),
            self.chat_link_input.text(),
            max_members,
            self.session_name
        )

        self.parser_thread.progress_signal.connect(self.update_status)
        self.parser_thread.progress_value.connect(self.progress_bar.setValue)
        self.parser_thread.finished_signal.connect(self.parsing_finished)
        self.parser_thread.error_signal.connect(self.parsing_error)
        self.parser_thread.auth_code_needed.connect(self.handle_auth_code)
        self.parser_thread.auth_password_needed.connect(self.handle_auth_password)

        self.parser_thread.start()

    def stop_parsing(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        if self.parser_thread and self.parser_thread.isRunning():
            self.parser_thread.stop()
            self.update_status("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞...")

            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if not self.parser_thread.wait(5000):  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
                self.parser_thread.terminate()
                self.parser_thread.wait()
                self.update_status("‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                self.update_status("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        self.reset_ui()

    def update_status(self, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.status_text.append(f"[{timestamp}] {message}")

        # –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª
        cursor = self.status_text.textCursor()
        cursor.movePosition(cursor.MoveOperation.End)
        self.status_text.setTextCursor(cursor)

    def parsing_finished(self, chat_title, data):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        self.parsed_data = data
        self.update_status(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–ª—É—á–µ–Ω–æ {len(data)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.fill_results_table(data)

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.tabs.setCurrentIndex(2)

        self.reset_ui()
        self.save_csv_btn.setEnabled(True)

    def parsing_error(self, error_message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        self.update_status(error_message)
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞", error_message)
        self.reset_ui()

    def fill_results_table(self, data):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not data:
            return

        headers = list(data[0].keys())
        self.results_table.setColumnCount(len(headers))
        self.results_table.setRowCount(len(data))
        self.results_table.setHorizontalHeaderLabels(headers)

        for row, item in enumerate(data):
            for col, header in enumerate(headers):
                self.results_table.setItem(row, col, QTableWidgetItem(str(item[header])))

        self.results_table.resizeColumnsToContents()

    def save_csv(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV"""
        if not self.parsed_data:
            return

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        default_name = f"telegram_members_extended_{timestamp}.csv"

        filename, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV",
            os.path.join(self.save_path_input.text(), default_name),
            "CSV files (*.csv)"
        )

        if filename:
            try:
                with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                    if self.parsed_data:
                        writer = csv.DictWriter(csvfile, fieldnames=self.parsed_data[0].keys())
                        writer.writeheader()
                        writer.writerows(self.parsed_data)

                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {str(e)}")

    def clear_results(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.parsed_data = []
        self.results_table.setRowCount(0)
        self.save_csv_btn.setEnabled(False)

    def handle_auth_code(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        code, ok = QInputDialog.getText(
            self,
            "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
            message,
            QLineEdit.EchoMode.Normal
        )

        if ok and code:
            self.parser_thread.auth_code = code.strip()
        else:
            self.parser_thread.auth_code = ""

    def handle_auth_password(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è 2FA"""
        password, ok = QInputDialog.getText(
            self,
            "–ü–∞—Ä–æ–ª—å 2FA",
            "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:",
            QLineEdit.EchoMode.Password
        )

        if ok and password:
            self.parser_thread.auth_password = password
        else:
            self.parser_thread.auth_password = ""

    def reset_ui(self):
        """–°–±—Ä–æ—Å UI –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.progress_bar.setVisible(False)
        self.progress_bar.setValue(0)

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.parser_thread and self.parser_thread.isRunning():
            self.parser_thread.stop()
            self.parser_thread.wait(3000)
        event.accept()


def main():
    app = QApplication(sys.argv)

    # –°—Ç–∏–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.setStyleSheet("""
        QMainWindow {
            background-color: #f5f5f5;
        }
        QGroupBox {
            font-weight: bold;
            border: 2px solid #ccc;
            border-radius: 5px;
            margin: 10px 0px;
            padding-top: 10px;
        }
        QGroupBox::title {
            subcontrol-origin: margin;
            left: 10px;
            padding: 0 5px 0 5px;
        }
        QPushButton {
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            font-weight: bold;
        }
        QPushButton:hover {
            opacity: 0.8;
        }
        QLineEdit {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        QTextEdit {
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        QTableWidget {
            gridline-color: #ddd;
            background-color: white;
        }
        QTableWidget::item {
            padding: 5px;
        }
        QTableWidget::item:selected {
            background-color: #3498db;
            color: white;
        }
    """)

    window = TelegramParserGUI()
    window.show()

    sys.exit(app.exec())


if __name__ == "__main__":
    main()
